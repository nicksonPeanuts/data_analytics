<<<<<<< HEAD
demo()
graphics
demo(graphics.off())
plot(x,t)
script
help()
plot(1:10)
plot(1:10)
for(a in 1:10):
for(a in 1:10):
plot(1:10)
for(a in 1:10){
plot(1:10)
}
getwd()
=======
points(xx,dnorm(xx,2,1), type="l", lty=3, col=3, lwd=3)
xx <- seq(-5,5,.0001)
#1 arg- asse x, 2 arg- asse y
plot(xx,dnorm(xx,-2,1), type="l", xlim=c(-6,6))
points(xx,dnorm(xx,0,1), type="l", lty=2, col=2, lwd=3)
points(xx,dnorm(xx,2,1), type="l", lty=3, col=3, lwd=3)
xx <- seq(-5,5,.01)
#1 arg- asse x, 2 arg- asse y
plot(xx,dnorm(xx,-2,1), type="l", xlim=c(-6,6))
points(xx,dnorm(xx,0,1), type="l", lty=2, col=2, lwd=3)
points(xx,dnorm(xx,2,1), type="l", lty=3, col=3, lwd=3)
points(xx,dnorm(xx,0,1), type="l", lty=3, col=2, lwd=3)
points(xx,dnorm(xx,0,1), type="l", lty=1, col=2, lwd=3)
points(xx,dnorm(xx,0,1), type="l", lty=2, col=2, lwd=3)
points(xx,dnorm(xx,0,1), type="l", lty=2, col=2, lwd=3)
#1 arg- asse x, 2 arg- asse y
plot(xx,dnorm(xx,-2,1), type="l", xlim=c(-6,6))
points(xx,dnorm(xx,0,1), type="l", lty=2, col=2, lwd=3)
points(xx,dnorm(xx,2,1), type="l", lty=3, col=3, lwd=3)
#1 arg- asse x, 2 arg- asse y
plot(xx,dnorm(xx,-2,3), type="l", xlim=c(-6,6))
points(xx,dnorm(xx,0,1), type="l", lty=2, col=2, lwd=3)
points(xx,dnorm(xx,2,1), type="l", lty=3, col=3, lwd=3)
#1 arg- asse x, 2 arg- asse y
plot(xx,dnorm(xx,-2,1), type="l", xlim=c(-6,6))
points(xx,dnorm(xx,0,1), type="l", lty=2, col=2, lwd=3)
points(xx,dnorm(xx,2,1), type="l", lty=3, col=3, lwd=3)
#in alternativa
#primo argomento: funzione da valutare, che ha x come argomento
#x non deve essere definito. Ma serve a curve
curve(dnorm(x,-1,1.5),col=4, lwd=3, lty=4, add=T)
# funzione di ripartizione
curve(pnorm(x,-1,1.5), col=4, lwd=3, lty=4, xlim = c(-4,4))
#in alternativa
#primo argomento: funzione da valutare, che ha x come argomento
#x non deve essere definito. Ma serve a curve
curve(dnorm(x,-1,1.5),col=4, lwd=3, lty=4, add=T)
# funzione di ripartizione
curve(pnorm(x,-1,1.5), col=4, lwd=3, lty=4, xlim = c(-4,4))
#in alternativa
#primo argomento: funzione da valutare, che ha x come argomento
#x non deve essere definito. Ma serve a curve
curve(dnorm(x,-1,1.5),col=4, lwd=3, lty=4, add=T)
points(xx,dnorm(xx,2,1), type="l", lty=3, col=3, lwd=3)
#in alternativa
#primo argomento: funzione da valutare, che ha x come argomento
#x non deve essere definito. Ma serve a curve
curve(dnorm(x,-1,1.5),col=4, lwd=3, lty=4, add=T)
# funzione di ripartizione
curve(pnorm(x,-1,1.5), col=4, lwd=3, lty=4, xlim = c(-4,4))
xx <- seq(-5,5,.01)
#1 arg- asse x, 2 arg- asse y
plot(xx,dnorm(xx,-2,1), type="l", xlim=c(-6,6))
points(xx,dnorm(xx,0,1), type="l", lty=2, col=2, lwd=3)
points(xx,dnorm(xx,2,1), type="l", lty=3, col=3, lwd=3)
#in alternativa
#primo argomento: funzione da valutare, che ha x come argomento
#x non deve essere definito. Ma serve a curve
curve(dnorm(x,-1,1.5),col=4, lwd=3, lty=4, add=T)
# funzione di ripartizione
curve(pnorm(x,-1,1.5), col=4, lwd=3, lty=4, xlim = c(-4,4))
#in alternativa
#primo argomento: funzione da valutare, che ha x come argomento
#x non deve essere definito. Ma serve a curve
curve(dnorm(x,-1,1.5),col=4, lwd=3, lty=4)
#in alternativa
#primo argomento: funzione da valutare, che ha x come argomento
#x non deve essere definito. Ma serve a curve
#normale solo in 0 e 1, di default senza add
curve(dnorm(x,-1,1.5),col=4, lwd=3, lty=4, xlim = c(-5,5))
pnorm(185, 170, sqrt(100))
curve(dnorm(x,170, sqrt(100),) col=4, lwd=3, lty=4, xlim=c(140,200))
curve(dnorm(x,170, sqrt(100),) col=4, lwd=3, lty=4, xlim=c(140,200))
curve(dnorm(x,170, sqrt(100)) col=4, lwd=3, lty=4, xlim=c(140,200))
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, xlim=c(140,200))
# - Pr(165 <= X <= 190)
pnorm(190, 170, sqrt(100)) -pnorm(165, 170, sqrt(100))
obline=190
# Ci aspettiamo che circa il ... % dei valori sia inferiore a 0.4
set.seed(14)
obline(v = 190)
obline(v = 190)
abline(v = 190)
abline(v = 165)
qnorm(0.99, 175, sqrt(100))
qnorm(0.99, 170, sqrt(100))
abline(v = quantile)
abline(v = qnorm(0.99, 170, sqrt(100))
qnorm(0.99, 170, sqrt(100))
abline(v = qnorm(0.99, 170, sqrt(100))
abline(v = qnorm(0.99, 170, sqrt(100)))
abline(v = qnorm(0.99, 170, sqrt(100)))
pnorm(0.25, 170, 10)
pnorm(0.5, 170, 10)
pnorm(0.75,170,10)
abline(v = qnorm(0.25, 170, 10))
abline(v = qnorm(0.5, 170, 10))
abline(v = qnorm(0.75,170,10))
qnorm(0.99, 170, sqrt(100))
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, xlim=c(140,200))
# - Pr(165 <= X <= 190)
pnorm(190, 170, sqrt(100)) -pnorm(165, 170, sqrt(100))
abline(v = qnorm(0.99, 170, sqrt(100)))
abline(v = qnorm(0.25, 170, 10))
abline(v = qnorm(0.5, 170, 10))
abline(v = qnorm(0.75,170,10))
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, xlim=c(140,200))
abline(v = qnorm(0.99, 170, sqrt(100)))
# Ci aspettiamo che circa il ... % dei valori sia inferiore a 0.4
set.seed(14)
simu <- runif(500,0,1)
sum(simu<.4)/length(simu)
set.seed(3)
n <- 500
dati.pois <- rpois(n,5)
tab <- table(dati.pois) # distribuzione di frequenze
tab
tabo <- as.data.frame(tab)
# convertiamo i valori in 'numeric'
punti <- as.numeric(levels(tabo$dati.pois))
freq <- as.numeric(tab/n)
# rappresentiamo graficamente le frequenze
plot(punti, freq, type="h", ylab="probability", xlab="x",
xlim=c(0,13))
#aggiungiamo la funzione di probabilità per una Poisson con media 5 solo per
# i punti osservati
points(punti+.1,dpois(punti,5),type="h",col=2, lwd=3)
# rappresentiamo graficamente le frequenze
plot(punti, freq, type="", ylab="probability", xlab="x",
xlim=c(0,13))
# rappresentiamo graficamente le frequenze
plot(punti, freq, type="", ylab="probability", xlab="x",
xlim=c(0,13))
# rappresentiamo graficamente le frequenze
plot(punti, freq, ylab="probability", xlab="x",
xlim=c(0,13))
#aggiungiamo la funzione di probabilità per una Poisson con media 5 solo per
# i punti osservati
points(punti+.1,dpois(punti,5),type="h",col=2, lwd=3)
#aggiungiamo la funzione di probabilità per una Poisson con media 5 solo per
# i punti osservati
points(punti+.1,dpois(punti,5),col=2, lwd=3)
# rappresentiamo graficamente le frequenze
plot(punti, freq, ylab="probability", xlab="x",
xlim=c(0,13))
#aggiungiamo la funzione di probabilità per una Poisson con media 5 solo per
# i punti osservati
points(punti+.1,dpois(punti,5),col=2, lwd=3)
set.seed(3)
set.seed(3)
dati.pois <- rpois(n, 100)
set.seed(3)
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, xlim=c(140,200))
n <- 800
dnorm(c(-400, 400), 10, 25)
dati <- rnorm(n, 10, 25)
dnorm(c(-400, 400), 10, 25)
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, xlim=c(140,200))
dati <- rnorm(n, 10, 5)
dnorm(c(-400, 400), 10, 5)
table <- table(dati)
table <- table(dati)
tableo <- as.data.frame(table)
punti <- as.numeric(levels(tableo$dati))
freq <- as.numeric(tableo/n)
table <- table(dati)
tableo <- as.data.frame(table)
punti <- as.numeric(levels(tableo$dati))
freq <- as.numeric(tableo/n)
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, xlim=c(140,200))
tableo
punti <- as.numeric(levels(tableo$Freq))
freq <- as.numeric(tableo/n)
freq <- as.numeric(tab/n)
# rappresentiamo graficamente le frequenze
plot(punti, freq, ylab="probability", xlab="x",
xlim=c(0,13))
freq <- as.numeric(tableo/n)
freq <- as.numeric(tableo$dati/n)
freq <- as.numeric(tableo$Freq/n)
plot(punti, freq, ylab="probability", xlab="x",
xlim=c(0,13))
plot(punti, freq, ylab="probability", xlab="x",
xlim=c(0,13))
plot(punti, freq*n, ylab="probability", xlab="x",
xlim=c(0,13))
hist(freq)
hist(dati)
plot(punti, freq, ylab="probability", xlab="x",
xlim=c(0,13))
plot(punti, freq, ylab="probability", xlab="x",
xlim=c(0,13), add=T)
plot(punti, freq, ylab="probability", xlab="x",
xlim=c(0,13), add="T")
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, xlim=c(140,200))
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, xlim=c(140,200), add=T)
plot(punti, freq, ylab="probability", xlab="x",
xlim=c(0,13), add="T")
plot(punti, freq, ylab="probability", xlab="x",
xlim=c(0,13), add="T")
hist(dati)
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, xlim=c(140,200), add=T)
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, add=T)
hist(dati, freq = FALSE)
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, add=T)
set.seed(3)
n <- 800
dati <- rnorm(n, 10, 5)
dnorm(c(-400, 400), 10, 5)
table <- table(dati)
tableo <- as.data.frame(table)
tableo
punti <- as.numeric(levels(tableo$Freq))
freq <- as.numeric(tableo$Freq/n)
hist(dati, freq = FALSE)
curve(dnorm(x,170, sqrt(100)), col=4, lwd=3, lty=4, add=T)
n <- 800
dati <- rnorm(n, 10, 5)
hist(dati, freq = FALSE)
curve(dnorm(x,10, 5), col=4, lwd=3, lty=4, add=T)
rm(list=ls())
library(insuranceData)
data("AutoBi")
str(AutoBi) # esplorare il tipo di variabili
# A volte è opportuno trasformare un variabile quantitativa in classi: cut()
?cut # restituisce un factor
range(AutoBi$CLMAGE, na.rm=TRUE)
CLMAGEclass<-cut(AutoBi$CLMAGE, breaks=6) #crea 6 classi
str(CLMAGEclass)
levels(CLMAGEclass)
# ma possiamo anche definire classi di ampiezza diversa
CLMAGEclass<-cut(AutoBi$CLMAGE, breaks=c(0,15,24,36,50,95),
include.lowest = T)
CLMAGEclass<-cut(AutoBi$CLMAGE, breaks=c(-1,15,24,36,50,95))
str(CLMAGEclass)
levels(CLMAGEclass)
library(MASS)
data("Cars93")
View(Cars93)
hist(Cars93$Length)
?hist
hist(Cars93$Length, prob=T)
hist(Cars93$Length)
hist(Cars93$Length, prob=T)
hist(Cars93$Length, prob=TRUE, main="istogramma con le densità")
hist(Cars93$Length, prob=TRUE, breaks=12, main="istogramma 12 intervalli")
hist(Cars93$Length, prob=TRUE, breaks=c(140,160,170,180,190,200,220),
main="istogramma con classi di diversa ampiezza")
hist(Cars93$Length, prob=TRUE, breaks=c(140,160,170,180,190,200,220),
main="istogramma con classi di diversa ampiezza")
hist(Cars93$Length, prob=TRUE, breaks=c(140,160,170,180,190,200,220),
main="istogramma con classi di diversa ampiezza")
str(mio)
str(mio)
mio = hist(Cars93$Length, prob=TRUE, breaks=c(140,160,170,180,190,200,220),
main="istogramma con classi di diversa ampiezza")
str(mio)
sum(mio$counts)
4/93
freq = 4/93
cl = freq / 20
str(mio)
sum(Cars93$Length)
len <- c(20,10,10,10,10,20)
len <- c(20,10,10,10,10,20)
sum(len*mio$density)
set.seed(1111)
set.seed(1111)
dati <- rnorm(50)
dat1 <- rnorm(50)
dat1
set.seed(1111)
dat1 <- rnorm(50)
dat1
plot(ecdf(dat1), cex=5, main="confronto")
plot(ecdf(dat1), cex=.5, main="confronto")
curve(pnorm(x), add=TRUE)
#dati da una T di student
dat2 <- rt((50,1))
dat2
#dati da una T di student
dat2 <- rt((50,1))
dat2
#dati da una T di student
dat2 <- rt(50,1)
dat2
plot(ecdf(dat2), cex=.5, main="confronto")
plot(ecdf(dat2), cex=.5, main="confronto t di student")
curve(pnorm(x), add=TRUE)
curve(pnorm(x), add=TRUE)
# esempio della dispensa
par(mfrow=c(1,2))
dat3<-rnorm(100) # si generano dati da una gaussiana standard
hist(dat3,prob=T, xlim=c(-5,5), ylim=c(0,0.6))
# e si sovrappone la funzione di densità della gaussiana standard
curve(dnorm(x,0,1),  col=2, lwd=2, add=TRUE)
# Ora si può provare con una numerosità dei dati più elevata
dat32<-rnorm(1000) # generiamo dati da una gaussiana standard
hist(dat32,prob=T, xlim=c(-5,5), ylim=c(0,0.6))
# sovrapponiamo la funzione di densità della gaussiana standard
curve(dnorm(x,0,1), col=2, lwd=2, add=TRUE)
dat4<-rt(1000,1) # si generano i dati da una t di studente con 1 gdl
plot(density(dat4), xlim=c(-6,6), ylim=c(0,0.6))
# se si sovrappone la funzione di densità di una gaussiana,
# dovremmo notare differenze sulle code
curve(dnorm(x,0,1),  col=2, lwd=2, add=TRUE)
par(mfrow=c(1,1))
dat4<-rt(1000,1) # si generano i dati da una t di studente con 1 gdl
plot(density(dat4), xlim=c(-6,6), ylim=c(0,0.6))
# se si sovrappone la funzione di densità di una gaussiana,
# dovremmo notare differenze sulle code
curve(dnorm(x,0,1),  col=2, lwd=2, add=TRUE)
data(iris)
data(iris)
boxplot(iris$Sepal.Length[iris$Species=="virginica"],
iris$Sepal.Length[iris$Species=="versicolor"],
names=(c("","versicolor")))
data(iris)
boxplot(iris$Sepal.Length[iris$Species=="virginica"],
iris$Sepal.Length[iris$Species=="versicolor"],
names=(c("","versicolor")))
boxplot(iris$Sepal.Length~iris$Species)
data(iris)
data(iris)
iris
iris
boxplot(iris$Sepal.Length[iris$Species=="virginica"],
iris$Sepal.Length[iris$Species=="versicolor"],
names=(c("","versicolor")))
boxplot(iris$Sepal.Length~iris$Species)
library(insuranceData)
data("AutoBi")
AutoBi$MARITAL<- factor(AutoBi$MARITAL)
levels(AutoBi$MARITAL)<-c("married", "single", "previouslymarried", "previouslymarried")
AutoBi$LOSSclass<-cut(AutoBi$LOSS,breaks=c(0,0.5,2,4,8,1100))
AutoBi$ATTORNEY<- factor(AutoBi$ATTORNEY)
levels(AutoBi$ATTORNEY) = c("yes", "no")
AutoBi$CLMSEX<-factor(AutoBi$CLMSEX)
levels(AutoBi$CLMSEX) <- c("M", "F")
tab1 <- table(AutoBi$ATTORNEY,AutoBi$CLMSEX)
tab1
rtab<-prop.table(tab1, 1)
ctab<-prop.table(tab1, 2)
rtab
rtab
ctab
barplot(ctab,legend=T,beside=TRUE, ylim=c(0,1))
table(AutoBi$MARITAL)
AutoBi$MARITAL
table(AutoBi$MARITAL)
AutoBi$MARITAL<- factor(AutoBi$MARITAL)
levels(AutoBi$MARITAL)<-c("married", "single", "previouslymarried", "previouslymarried")
AutoBi$LOSSclass<-cut(AutoBi$LOSS,breaks=c(0,0.5,2,4,8,1100))
AutoBi$ATTORNEY<- factor(AutoBi$ATTORNEY)
levels(AutoBi$ATTORNEY) = c("yes", "no")
AutoBi$CLMSEX<-factor(AutoBi$CLMSEX)
levels(AutoBi$CLMSEX) <- c("M", "F")
tab1 <- table(AutoBi$ATTORNEY,AutoBi$CLMSEX)
tab1
rtab<-prop.table(tab1, 1)
ctab<-prop.table(tab1, 2)
rtab
ctab
barplot(ctab,legend=T,beside=TRUE, ylim=c(0,1))
table(AutoBi$MARITAL)
levels(AutoBi$MARITAL)<-c("married", "single", "previouslymarried", "previouslymarried")
AutoBi$LOSSclass<-cut(AutoBi$LOSS,breaks=c(0,0.5,2,4,8,1100))
tab1 <- table(AutoBi$ATTORNEY,AutoBi$CLMSEX)
tab1
rtab<-prop.table(tab1, 1)
ctab<-prop.table(tab1, 2)
rtab
ctab
barplot(ctab,legend=T,beside=TRUE, ylim=c(0,1))
ctab<-prop.table(tab1, 2)
rtab
ctab
barplot(ctab,legend=T,beside=TRUE, ylim=c(0,1))
rm(list = ls())
getwd()
setwd("/home/nic/scrivania")
setwd("/home/scrivania")
setwd("/scrivania")
setwd("/home/nic/Scrivania/")
setwd("/home/nic/Scrivania/data_analytics/ESERCITAZIONI/ES2")
dati <- read.csv("fev.csv")
View(dati)
View(dati)
dati$AGE
table(dati$AGE)
tabage<-table(dati$AGE)
pie(tabage)
barplot(tabage)
View(dati)
tabfev <- table(dati$FEV)
tabfev
barplot(tabfev)
par(tabfev)
stripchart?
;
?
;
?stripchart
stripchart(dati$FEV)
stripchart(dati$FEV, pch=19, method="stack", cex=1.2, ylim=c(0,2))
dotchart(dati$FEV)
#controllo dei valori mancanti
is.na.data.frame(dati)
#age
#evidenziare la frequenza dell'età delle persone analizzate
tabage<-table(dati$AGE)
barplot(tabage)
dotchart(dati$FEV)
tabfev
dati$FEV
FEV <- dati$FEV
mean(FEV)
fivenum(FEV)
boxplot(FEV, horizontal=TRUE)
boxplot(log(FEV), horizontal=TRUE)
boxplot(FEV, horizontal=TRUE)
height <- dati$HEIGHT
height
fivenum(height)
boxplot(height, horizontal=TRUE)
#plotting dei grafici nella stessa schermata
par(mfrow = c(2,5))
#age
#evidenziare la frequenza dell'età delle persone analizzate
tabage<-table(dati$AGE)
barplot(tabage)
FEV <- dati$FEV
fivenum(FEV)
boxplot(FEV, horizontal=TRUE)
height <- dati$HEIGHT
fivenum(height)
boxplot(height, horizontal=TRUE)
#plotting dei grafici nella stessa schermata
par(mfrow = c(5,2))
#age
#evidenziare la frequenza dell'età delle persone analizzate
tabage<-table(dati$AGE)
barplot(tabage)
FEV <- dati$FEV
fivenum(FEV)
boxplot(FEV, horizontal=TRUE)
height <- dati$HEIGHT
fivenum(height)
boxplot(height, horizontal=TRUE)
#plotting dei grafici nella stessa schermata
par(mfrow = c(5,2))
#age
#evidenziare la frequenza dell'età delle persone analizzate
tabage<-table(dati$AGE)
barplot(tabage)
#plotting dei grafici nella stessa schermata
par(mfrow = c(2,3))
#age
#evidenziare la frequenza dell'età delle persone analizzate
tabage<-table(dati$AGE)
barplot(tabage)
FEV <- dati$FEV
fivenum(FEV)
boxplot(FEV, horizontal=TRUE)
height <- dati$HEIGHT
fivenum(height)
boxplot(height, horizontal=TRUE)
boxplot(height, horizontal=TRUE, xlab="height")
#plotting dei grafici nella stessa schermata
par(mfrow = c(2,3), mar = c())
#age
#evidenziare la frequenza dell'età delle persone analizzate
tabage<-table(dati$AGE)
barplot(tabage, xlab="frequenza", ylab = "età")
FEV <- dati$FEV
fivenum(FEV)
boxplot(FEV, horizontal=TRUE, xlab= "FEV")
height <- dati$HEIGHT
fivenum(height)
boxplot(height, horizontal=TRUE, xlab="height")
sex <- factor(dati$SEX, levels = c(0,1), labels=c("Female", "Male")
sex
sex <- factor(dati$SEX, levels = c(0,1), labels=c("Female", "Male"))
sex
barplot(table(dati$SEX))
barplot(table(dati$SMOKE))
barplot(table(log(dati$SMOKE))
barplot(table(log(dati$SMOKE)))
barplot(log(table(dati$SMOKE)))
barplot(table(log(dati$SMOKE)))
barplot(table(dati$SMOKE))
>>>>>>> ed3a92d (prova)
#SETTING AREA DI LAVORO
getwd()
setwd("/home/nic/Scrivania/data_analytics/ESERCITAZIONI/ES2")
#caricamento del dataset
dati <- read.csv("fev.csv")
#controllo dei valori mancanti
is.na.data.frame(dati)
<<<<<<< HEAD
setwd("C:\Users\pinat\Desktop\Data Analytics\ES2")
#SETTING AREA DI LAVORO
getwd()
setwd("C:\Users\pinat\Desktop\Data Analytics\ES2")
setwd("C:\\Users\\pinat\Desktop\\Data Analytics\\ES2")
setwd("C:\\Users\\pinat\\Desktop\\Data Analytics\\ES2")
#caricamento del dataset
dati <- read.csv("fev.csv")
#controllo dei valori mancanti
is.na.data.frame(dati)
=======
>>>>>>> ed3a92d (prova)
#plotting dei grafici nella stessa schermata
par(mfrow = c(2,3), mar = c())
#age
#evidenziare la frequenza dell'età delle persone analizzate
tabage<-table(dati$AGE)
barplot(tabage, xlab="frequenza", ylab = "età")
FEV <- dati$FEV
fivenum(FEV)
boxplot(FEV, horizontal=TRUE, xlab= "FEV")
height <- dati$HEIGHT
fivenum(height)
boxplot(height, horizontal=TRUE, xlab="height")
barplot(table(dati$SEX))
barplot(table(dati$SMOKE))
<<<<<<< HEAD
barplot(table(dati$SMOKE))
barplot(table(dati$SMOKE))
barplot(table(dati$SMOKE))
#SETTING AREA DI LAVORO
getwd()
setwd("C:\\Users\\pinat\\Desktop\\Data Analytics\\ES2") #path windows
#caricamento del dataset
dati <- read.csv("fev.csv")
#controllo dei valori mancanti
is.na.data.frame(dati)
#plotting dei grafici nella stessa schermata
par(mfrow = c(2,3), mar = c())
#age
#evidenziare la frequenza dell'età delle persone analizzate
tabage<-table(dati$AGE)
barplot(tabage, xlab="frequenza", ylab = "età")
FEV <- dati$FEV
fivenum(FEV)
boxplot(FEV, horizontal=TRUE, xlab= "FEV")
height <- dati$HEIGHT
fivenum(height)
boxplot(height, horizontal=TRUE, xlab="height")
barplot(table(dati$SEX))
barplot(table(dati$SMOKE))
data(dati)
dati$HEIGHT
dati$FEV[dati$SEX=="Female"]
boxplot(FEVfemale, FEVmale, names = c("Females", "Males"))
FEVfemale <- dati$FEV[dati$SEX=="Female"]
FEVmale <- dati$FEV[dati$SEX=="Male"]
boxplot(FEVfemale, FEVmale, names = c("Females", "Males"))
#plotting dei grafici nella stessa schermata
old_par <- par(no.readonly = TRUE)
par(mfrow = c(2,3), mar = c())
#age
#evidenziare la frequenza dell'età delle persone analizzate
tabage<-table(dati$AGE)
barplot(tabage, xlab="frequenza", ylab = "età")
FEV <- dati$FEV
fivenum(FEV)
boxplot(FEV, horizontal=TRUE, xlab= "FEV")
height <- dati$HEIGHT
fivenum(height)
boxplot(height, horizontal=TRUE, xlab="height")
barplot(table(dati$SEX))
barplot(table(dati$SMOKE))
par(old_par)
FEVfemale <- dati$FEV[dati$SEX=="Female"]
FEVmale <- dati$FEV[dati$SEX=="Male"]
boxplot(FEVfemale, FEVmale, names = c("Females", "Males"))
dev.off()
#SETTING AREA DI LAVORO
getwd()
setwd("C:\\Users\\pinat\\Desktop\\Data Analytics\\ES2") #path windows
#caricamento del dataset
dati <- read.csv("fev.csv")
#controllo dei valori mancanti
is.na.data.frame(dati)
#plotting dei grafici nella stessa schermata
old_par <- par(no.readonly = TRUE)
par(mfrow = c(2,3), mar = c())
#age
#evidenziare la frequenza dell'età delle persone analizzate
tabage<-table(dati$AGE)
barplot(tabage, xlab="frequenza", ylab = "età")
FEV <- dati$FEV
fivenum(FEV)
boxplot(FEV, horizontal=TRUE, xlab= "FEV")
height <- dati$HEIGHT
fivenum(height)
boxplot(height, horizontal=TRUE, xlab="height")
barplot(table(dati$SEX))
barplot(table(dati$SMOKE))
par(old_par)
FEVfemale <- dati$FEV[dati$SEX=="Female"]
FEVmale <- dati$FEV[dati$SEX=="Male"]
boxplot(FEVfemale, FEVmale, names = c("Females", "Males"))
plot(dati$HEIGHT, dati$FEV)
plot(dati$HEIGHT, dati$FEV, xlab = "height", ylab = "fev")
cov(dati$HEIGHT, dati$FEV)
print(paste("indice di covarianza", cov(dati$HEIGHT, dati$FEV))
print(paste("indice di covarianza", cov(dati$HEIGHT, dati$FEV))
print(paste("indice di covarianza", cov(dati$HEIGHT, dati$FEV)))
print(paste("indice di covarianza fra height e fev", cov(dati$HEIGHT, dati$FEV)))
height
dev = sum((FEV-mean(FEV))^2)
b1 <- cov(heigh, FEV)/var(FEV)
b1 <- cov(heigth, FEV)/var(FEV)
b1 <- cov(height, FEV)/var(FEV)
print(paste("coefficiente di regressione: ", b1))
b0 <- mean(height)
b0 <- mean(height)-b1*mean(FEV)
b0 <- mean(height)-b1*mean(FEV)
print(paste("intercetta: ", b0))
abline(b0,b1, col=2)
abline(b0,b1, col=2)
plot(height, FEV, pch=19)
abline(b0,b1, col=2)
# Y = FEV, X = height
b1 <- cov(height, FEV) / var(height)  # var(X)
b0 <- mean(FEV) - b1 * mean(height)   # Ybar - b1 * Xbar
print(paste("coefficiente di regressione: ", b1))
print(paste("intercetta: ", b0))
plot(height, FEV, pch=19)
abline(b0,b1, col=2)
plot(height, FEV, pch=10)
abline(b0,b1, col=2)
=======
>>>>>>> ed3a92d (prova)
